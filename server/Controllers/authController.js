const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const uniqueValidator = require("mongoose-unique-validator");
const { validationResult } = require("express-validator");

const mongoose = require("mongoose");
const Student = require("../Models/studentModel");
const Speaker = require("../Models/speakerModel");

module.exports.registration = (request, response, next) => {
  let result = validationResult(request); 
  if (!result.isEmpty()) {
    let message = result
      .array()
      .reduce((current, error) => current + error.msg + " ", " ");
    let error = new Error(message);
    error.status = 422;
    throw error;
  }
  if (request.body.role == "student") {
    Student.findOne({ id: request.body.id, email: request.body.email })
      .then((data) => {
        if (data) throw new Error("student's email already exists");
        let student = new Student({
          _id: request.body.id,
          email: request.body.email,
          password: request.body.password,
        });
        return student.save();
      })
      .then(() => {
        response.status(200).json({ message: "Student Registered Successfully" });
      })
      .catch((error) => next(error));
    }
   else if (request.body.role == "speaker") {
    Speaker.findOne({ Email: request.body.Email })
      .then((data2) => {
        console.log(data2);

        if (data2) throw new Error("speaker's email already exists");
        let speaker = new Speaker({
          _id: new mongoose.Types.ObjectId(),
          UserName: request.body.UserName,
          Email: request.body.Email,
          password: request.body.password,
          city: request.body.city,
          street: request.body.street,
          building: request.body.building,
        });
        return speaker.save();
      })
      .then((data2) => {
        console.log(request.body);

        response.status(201).json({ message: "Speaker Added", data2 });
      })
      .catch((error) => next(error));
  } 
  else {
    throw new Error("specify the role");
  }
};

//----------------------------LOGIN------------------------------------------------
module.exports.login = (request, response, next) => {
  let token;
  //connection db findOne() // here check through database if that person is admin
  if (request.body.email == "ahmed@gmail.com" && request.body.password == 123) {
    token = jwt.sign(
      {
        _id: 1, 
        email: request.body.email,
        role: "admin",
      },
      "secretKey"
    ); // THIS SHOULD BE GENERATED BY CRYPTO
    response.status(200).json({ msg: "admin login", token });
  } else {
    Speaker.findOne({ Email: request.body.email })
      .then((data) => {
        if(data != null){
        SpeakerStudentLogin(data, "speaker", request, response);

        }
        else{
          Student.findOne({ email: request.body.email })
          .then((dataa) => {
            SpeakerStudentLogin(dataa, "student", request, response);
          })
        }

      })
      .catch((error) => next(error));
    }

};
//-----------------------------------Login Function----------------------------------------------------------
function SpeakerStudentLogin(data, role, request, response) {
  if (
    data == null ||!bcrypt.compareSync(request.body.password, data.password)
  ) {
    errorMessage = "Email/Password incrorrect ";
    error = new Error(errorMessage);
    error.status = 500;
    throw error;
  }

  token = jwt.sign(
    {
      id: data._id,
      email: data.email,
      role: role,
    },
    "secretKey"
  );
  response
    .status(200)
    .json({ message: role + " logged in successfully", token });
}
